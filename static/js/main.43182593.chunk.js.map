{"version":3,"sources":["assets/images/logo.svg","components/color-picket/picket/Picket.jsx","components/color-picket/ColorPicket.jsx","components/task/Task.jsx","components/tasks/Tasks.jsx","services/Storage.js","helpers/generateID.js","classes/Task.js","components/task-list/TaskList.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Picket","defaultComponentClassName","defaultColorCircleClassName","greenClassName","redClassName","yellowClassName","resetColorClasses","setSelectedColor","selectColor","setColor","event","cssClasses","target","className","includes","colorBeginAt","indexOf","clickedColor","substring","props","setColorFromPicket","this","selectedColor","componentClassName","isVisible","onClick","Component","ColorPicket","actualColorClassName","state","colorSelectorVisible","taskColorClassName","color","swapPicketVisibility","setState","bgColor","classToShowColor","title","Task","completeTask","id","onCompleteTask","cssClassesForCompleteBtn","deleteTask","onDeleteTask","dataId","completed","data-id","text","disabled","Tasks","taskId","listOfTasks","composeTaskList","taskList","tasks","map","task","key","Storage","window","localStorage","clear","storedData","getItem","JSON","parse","value","stringify","setItem","removeItem","UUIDGeneratorBrowser","replace","c","crypto","getRandomValues","Uint8Array","toString","generateID","TaskList","addTask","trim","newTask","createTask","defaultTaskColor","arrTasks","newTaskText","cleanTaskInput","tasksLength","length","taskText","markTaskAsCompleted","filter","forEach","storage","INITIAL","get","htmlFor","type","onChange","onKeyUp","updatedTasksStorage","set","App","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43182593.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8cc8eac2.svg\";","import './picket.scss';\nimport React, { Component } from 'react';\n\nclass Picket extends Component\n{\n    defaultComponentClassName = 'picket';\n    defaultColorCircleClassName = 'color-box color-circle';\n    greenClassName  = 'bg-green';\n    redClassName    = 'bg-red';\n    yellowClassName = 'bg-yellow';\n\n\n    render()\n    {\n        this.resetColorClasses();\n\n        this.setSelectedColor(this.props.selectedColor);\n        const componentClassName = (this.props.isVisible)\n            ? this.defaultComponentClassName + ' d-flex'\n            : this.defaultComponentClassName + ' d-none';\n\n        return (\n            <div className={componentClassName}>\n                <div className={this.greenClassName}\n                    onClick={this.setColor}></div>\n                <div className={this.redClassName}\n                    onClick={this.setColor}></div>\n                <div className={this.yellowClassName}\n                    onClick={this.setColor}></div>\n            </div>\n        );\n    }\n\n\n    resetColorClasses = () =>\n    {\n        this.greenClassName  = this.defaultColorCircleClassName + ' bg-green';\n        this.redClassName    = this.defaultColorCircleClassName + ' bg-red';\n        this.yellowClassName = this.defaultColorCircleClassName + ' bg-yellow';\n    }\n\n    setSelectedColor = (selectColor) =>\n    {\n        this.resetColorClasses();\n\n        switch (selectColor) {\n            case 'green':\n                this.greenClassName += ' selected';\n                break;\n\n            case 'red':\n                this.redClassName += ' selected';\n                break;\n\n            case 'yellow':\n                this.yellowClassName += ' selected';\n                break;\n\n            default:\n                this.greenClassName += ' selected';\n                break;\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////\n    // Actions\n\n    setColor = (event) =>\n    {\n        const cssClasses = event.target.className;\n        if (cssClasses.includes('selected')) {\n            return;\n        }\n\n        const colorBeginAt = cssClasses.indexOf('bg-') + 3;\n        const clickedColor = cssClasses.substring(colorBeginAt);\n\n        this.props.setColorFromPicket(clickedColor);\n    }\n}\n\nexport default Picket;\n","import './color-picket.scss';\nimport Picket from './picket/Picket';\nimport React, { Component } from 'react';\n\nclass ColorPicket extends Component\n{\n    actualColorClassName = 'actualColor color-circle';\n    state = { colorSelectorVisible: false }\n    taskColorClassName   = '';\n\n\n    render()\n    {\n        if (this.props.bgColor) {\n            this.taskColorClassName\n                = this.actualColorClassName + ' bg-' + this.props.bgColor;\n        }\n        const classToShowColor = (this.state.colorSelectorVisible)\n            ? ' d-none' : ' d-block';\n        this.taskColorClassName += classToShowColor;\n\n        return (\n            <div className=\"color-picket\">\n                <div className={this.taskColorClassName}\n                    title=\"Cambiar color\"\n                    onClick={this.swapPicketVisibility}></div>\n\n                <Picket\n                    isVisible={this.state.colorSelectorVisible}\n                    selectedColor={this.props.bgColor}\n                    setColorFromPicket={this.setColorFromPicket}>\n                </Picket>\n            </div>\n        );\n    }\n\n\n    ////////////////////////////////////////////////////////////////////\n    // Actions\n\n    setColorFromPicket = (color) =>\n    {\n        this.props.setColorFromPicket(color);\n\n        this.swapPicketVisibility();\n    }\n\n     swapPicketVisibility = () =>\n    {\n        this.setState({\n            colorSelectorVisible: ! this.state.colorSelectorVisible\n        })\n    }\n}\n\nexport default ColorPicket;\n","\nimport './task.scss';\nimport ColorPicket from '../color-picket/ColorPicket';\nimport React, { Component } from 'react';\n\nclass Task extends Component\n{\n\n    constructor(props)\n    {\n        super(props);\n\n        const cssClassesForCompleteBtn = (props.completed === true)\n            ? 'btn btn-dafault'\n            : 'btn btn-primary';\n\n        this.state = {\n            cssClassesForCompleteBtn: cssClassesForCompleteBtn\n        }\n    }\n\n    render()\n    {\n\n        return (\n            <div className=\"content-box task\" data-id={this.props.dataId}>\n                <ColorPicket\n                    bgColor={this.props.bgColor}\n                    setColorFromPicket={this.setColorFromPicket}>\n                </ColorPicket>\n\n                <p className=\"task-title\">\n                    {\n                        (this.props.completed === true)\n                            ? <span className=\"strikethrough-text opacity50\">this.props.text</span>\n                            : this.props.text\n                    }\n                </p>\n                <div className=\"task-buttons\">\n                    <button className={this.state.cssClassesForCompleteBtn}\n                        disabled={this.props.completed}\n                        onClick={() => { this.completeTask(this.props.dataId); }}>\n                        Completada\n                    </button>\n                    <button className=\"btn btn-primary\"\n                        onClick={() => { this.deleteTask(this.props.dataId); }}>\n                        Eliminar\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    ////////////////////////////////////////////////////////////////////\n    // Actions\n\n    completeTask = (id) =>\n    {\n        this.props.onCompleteTask(id);\n        this.setState({\n            cssClassesForCompleteBtn: 'btn btn-dafault'\n        });\n    }\n\n    deleteTask = (id) =>\n    {\n        this.props.onDeleteTask(id);\n    }\n\n    setColorFromPicket = (color) =>\n    {\n        this.props.setColorFromPicket(color, this.props.dataId);\n    }\n}\n\nexport default Task;\n","\nimport './tasks.scss';\nimport React, { Component } from 'react';\nimport Task from '../task/Task';\n\nclass Tasks extends Component\n{\n\n    render()\n    {\n        const listOfTasks = this.composeTaskList(this.props.taskList);\n\n        return (\n            <article className=\"task-list\">\n                {listOfTasks}\n            </article>\n        );\n    }\n\n\n    composeTaskList(tasks)\n    {\n        return tasks.map(\n            task => {\n                return (\n                    <Task key={task.id}\n                        bgColor={task.color}\n                        completed={task.completed}\n                        text={task.text}\n                        dataId={task.id}\n\n                        setColorFromPicket={this.setColorFromPicket}\n                        onCompleteTask={(id) => { this.completeTask(id); }}\n                        onDeleteTask={(id) => { this.deleteTask(id); }}>\n                    </Task>\n                );\n            }\n        );\n    }\n\n    ////////////////////////////////////////////////////////////////////\n    // Actions\n\n    completeTask = (id) => {\n        this.props.onCompleteTask(id);\n    }\n\n    deleteTask = (id) => {\n        this.props.onDeleteTask(id);\n    }\n\n    setColorFromPicket = (color, taskId) =>\n    {\n        this.props.setColorFromPicket(color, taskId);\n    }\n}\n\nexport default Tasks;\n","/**\n * Class to handle LocalStorage\n *\n * Moisés Alcocer, 2019\n * contacto@ironwoods.es\n */\n\nclass Storage\n{\n\n    clear()\n    {\n        window.localStorage.clear();\n    }\n\n    get(key)\n    {\n        const storedData = window.localStorage.getItem(key);\n        const value = (storedData !== null)\n            ? JSON.parse(storedData)\n            : '';\n\n        return value;\n    }\n\n    set(key, value)\n    {\n        value = JSON.stringify(value);\n\n        window.localStorage.setItem(key, value);\n    }\n\n    unset(key)\n    {\n        window.localStorage.removeItem(key);\n    }\n}\n\nexport default Storage;\n","/**\n * From https://gist.github.com/jupegarnica\n */\n\nconst UUIDGeneratorBrowser = () => (\n        [1e7] + -1e3 + -4e3 + -8e3 + -1e11\n    ).replace(\n        /[018]/g, c => (\n            c ^ (crypto.getRandomValues(\n                new Uint8Array(1)\n            )[0] & (15 >> (c / 4)))\n        ).toString(16)\n    );\n\n\nexport default UUIDGeneratorBrowser\n","import generateID from '../helpers/generateID.js';\n\nclass Task \n{\n    completed = false;\n    \n\n    constructor(text, color)\n    {\n        this.id    = generateID();\n        this.text  = text;\n        this.color = color;\n    }\n}\n\nexport default Task;\n","import './task-list.scss';\nimport React, { Component } from 'react';\nimport Tasks from '../tasks/Tasks';\nimport PropTypes from 'prop-types';\nimport Storage from '../../services/Storage.js';\nimport Task from '../../classes/Task.js';\n\n\nclass TaskList extends Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        // Set default values\n        this.defaultTaskColor = 'green';\n        this.storage = new Storage();\n\n        const data = this.storage.get('stored-tasks');\n        const INITIAL = {\n            newTaskText: '',\n            tasks: data,\n        };\n\n        this.state = INITIAL;\n    }\n\n    render()\n    {\n        const tasks = (this.state.tasks.length > 0)\n            ? <Tasks\n                taskList={this.state.tasks}\n                setColorFromPicket={this.setColorFromPicket}\n                onCompleteTask={(id) => { this.completeTask(id); }}\n                onDeleteTask={(id) => { this.deleteTask(id); }}></Tasks>\n            : '';\n\n        return (\n            <section className=\"App-task-list\">\n                <article className=\"content-box task-intro\">\n                    <label htmlFor=\"create-task\">Introduce una tarea:</label>\n                    <input type=\"text\"\n                        id=\"create-task\"\n                        value={this.state.newTaskText}\n                        onChange={event =>\n                            this.setState({ newTaskText: event.target.value })\n                        }\n                        onKeyUp={this.addTask}/>\n\n                    <button className=\"btn\" onClick={this.cleanTaskInput}>\n                        Clean\n                    </button>\n                </article>\n\n                {tasks}\n            </section>\n        );\n    }\n\n    componentDidUpdate()\n    {\n        this.updatedTasksStorage();\n    }\n\n\n    /**\n     * Custom methods\n     *\n     */\n\n    addTask = (event) =>\n    {\n        if (event.key === 'Enter') {\n            // const text  = document.getElementById('create-task').value.trim();\n            const text     = event.target.value.trim();\n            const newTask  = this.createTask(text, this.defaultTaskColor);\n            const arrTasks = [...this.state.tasks, newTask];\n\n            this.setState({\n                newTaskText: '',\n                tasks: arrTasks\n            });\n        }\n    }\n\n    cleanTaskInput = () =>\n    {\n        this.setState({\n            newTaskText: ''\n        });\n    }\n\n    createTask = (text: PropTypes.string, color: PropTypes.string) =>\n    {\n        let tasksLength = this.state.tasks.length;\n        const taskText = text || 'Task ' + ++tasksLength;\n\n        return new Task(taskText, color);\n    }\n\n    completeTask = (id: PropTypes.string) =>\n    {\n        const arrTasks = this.markTaskAsCompleted(this.state.tasks, id);\n        this.setState({\n            tasks: arrTasks\n        });\n    }\n\n    deleteTask = (id: PropTypes.string) =>\n    {\n        const arrTasks = this.state.tasks.filter(task => task.id !== id);\n        this.setState({\n            tasks: arrTasks\n        });\n    }\n\n    markTaskAsCompleted(tasks: PropTypes.array, taskId: PropTypes.string)\n    {\n        tasks.forEach(task => {\n            if (task.id === taskId) {\n                task.completed = true;\n            }\n        });\n\n        return tasks;\n    }\n\n    setColorFromPicket = (color, taskId) =>\n    {\n        const arrTasks = this.state.tasks;\n        arrTasks.forEach(task => {\n            if (task.id === taskId) {\n                task.color = color;\n            }\n        });\n\n        this.setState({\n            tasks: arrTasks\n        });\n    }\n\n    updatedTasksStorage()\n    {\n        this.storage.set('stored-tasks', this.state.tasks);\n    }\n}\n\nexport default TaskList;\n","import '../assets/styles/App.scss';\nimport React from 'react';\nimport TaskList from \"./task-list/TaskList\";\nimport logo from '../assets/images/logo.svg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <h3>TODO List</h3>\n      </header>\n\n      <TaskList></TaskList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}